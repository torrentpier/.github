name: Update versions list in README
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
jobs:
  version:
    name: Update versions list
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest releases from TorrentPier repositories
        run: |
          # Function to get release info
          get_release_info() {
            local repo="$1"
            local branch="$2"
            local tag_filter="$3"

            if [ -n "$tag_filter" ]; then
              # Filter by tag pattern (e.g. ^v2\.4\.)
              release_data=$(curl -s "https://api.github.com/repos/$repo/releases"  | jq -r --arg pattern "$tag_filter" '
                .[] | select(.tag_name | test($pattern)) | select(.prerelease == false and .draft == false) |
                [.tag_name, .published_at, .html_url, .target_commitish] | @tsv' | head -1)
            elif [ -n "$branch" ]; then
              # Filter by target branch
              release_data=$(curl -s "https://api.github.com/repos/$repo/releases"  | jq -r --arg branch "$branch" '
                .[] | select(.target_commitish == $branch) | select(.prerelease == false and .draft == false) |
                [.tag_name, .published_at, .html_url, .target_commitish] | @tsv' | head -1)
            else
              # Latest release
              release_data=$(curl -s "https://api.github.com/repos/$repo/releases/latest"  | jq -r '
                [.tag_name, .published_at, .html_url, .target_commitish] | @tsv')
            fi

            if [ -n "$release_data" ]; then
              echo "$release_data" | IFS=$'\t' read -r tag date url branch_name
              formatted_date=$(echo "$date" | cut -d'T' -f1)
              echo "TAG=$tag"
              echo "DATE=$formatted_date"
              echo "URL=$url"
              echo "BRANCH=$branch_name"
              return 0
            else
              return 1
            fi
          }

          # Main repository (latest release excluding v2.4.* tags)
          echo "=== Getting latest release from torrentpier/torrentpier (excluding v2.4.*) ==="
          REPO="torrentpier/torrentpier"

          # Получаем все стабильные релизы, исключая v2.4.*
          all_releases=$(curl -s "https://api.github.com/repos/$REPO/releases"  | jq -r '
            select(.prerelease == false and .draft == false) |
            [.tag_name, .published_at, .html_url, .target_commitish] | @tsv')

          release_data=$(echo "$all_releases" | grep -vE '^v2\.4\.')
          MAIN_INFO=$(echo "$release_data" | head -1)

          if [ -n "$MAIN_INFO" ]; then
            echo "$MAIN_INFO" | IFS=$'\t' read -r tag date url branch_name
            formatted_date=$(echo "$date" | cut -d'T' -f1)
            echo "TAG=$tag"
            echo "DATE=$formatted_date"
            echo "URL=$url"
            echo "LATEST_RELEASE=$tag" >> $GITHUB_ENV
            echo "RELEASE_DATE=$formatted_date" >> $GITHUB_ENV
            echo "RELEASE_URL=$url" >> $GITHUB_ENV
          else
            echo "No matching releases found for $REPO"
            exit 1
          fi

          echo ""
          echo "=== Getting latest v2.4.* release from torrentpier/torrentpier ==="
          V24_INFO=$(get_release_info "$REPO" "" "^v2\\.4\\.")
          if [ $? -eq 0 ]; then
            V24_LATEST_RELEASE=$(echo "$V24_INFO" | grep "^TAG=" | cut -d'=' -f2)
            V24_RELEASE_DATE=$(echo "$V24_INFO" | grep "^DATE=" | cut -d'=' -f2)
            V24_RELEASE_URL=$(echo "$V24_INFO" | grep "^URL=" | cut -d'=' -f2)
            echo "Latest v2.4.* release: $V24_LATEST_RELEASE"
            echo "Release date: $V24_RELEASE_DATE"
            echo "Release URL: $V24_RELEASE_URL"
            echo "V24_LATEST_RELEASE=$V24_LATEST_RELEASE" >> $GITHUB_ENV
            echo "V24_RELEASE_DATE=$V24_RELEASE_DATE" >> $GITHUB_ENV
            echo "V24_RELEASE_URL=$V24_RELEASE_URL" >> $GITHUB_ENV
          else
            echo "No v2.4.* releases found"
            echo "V24_LATEST_RELEASE=" >> $GITHUB_ENV
            echo "V24_RELEASE_DATE=" >> $GITHUB_ENV
            echo "V24_RELEASE_URL=" >> $GITHUB_ENV
          fi

          echo ""
          echo "=== Getting latest LTS release from torrentpier/torrentpier-lts ==="
          LTS_REPO="torrentpier/torrentpier-lts"
          LTS_INFO=$(get_release_info "$LTS_REPO")
          if [ $? -eq 0 ]; then
            LTS_LATEST_RELEASE=$(echo "$LTS_INFO" | grep "^TAG=" | cut -d'=' -f2)
            LTS_RELEASE_DATE=$(echo "$LTS_INFO" | grep "^DATE=" | cut -d'=' -f2)
            LTS_RELEASE_URL=$(echo "$LTS_INFO" | grep "^URL=" | cut -d'=' -f2)
            echo "LTS release version: $LTS_LATEST_RELEASE"
            echo "LTS release date: $LTS_RELEASE_DATE"
            echo "LTS release URL: $LTS_RELEASE_URL"
            echo "LTS_LATEST_RELEASE=$LTS_LATEST_RELEASE" >> $GITHUB_ENV
            echo "LTS_RELEASE_DATE=$LTS_RELEASE_DATE" >> $GITHUB_ENV
            echo "LTS_RELEASE_URL=$LTS_RELEASE_URL" >> $GITHUB_ENV
          else
            echo "Failed to get LTS repository release info"
            exit 1
          fi

      - name: Update versions list in README.md
        run: |
          if [ ! -f profile/README.md ]; then
            echo "README.md not found at profile/README.md"
            exit 1
          fi

          README_CONTENT=$(cat profile/README.md)

          # Create new table rows
          MAIN_NEW_ROW="| [$LATEST_RELEASE]($RELEASE_URL) | $RELEASE_DATE | | | ✅ |"

          if [ -n "$V24_LATEST_RELEASE" ]; then
            V24_NEW_ROW="| [$V24_LATEST_RELEASE]($V24_RELEASE_URL) | $V24_RELEASE_DATE | | ✅ | |"
          else
            V24_NEW_ROW="| No v2.4.* releases found | - | | | |"
          fi

          LTS_NEW_ROW="| [$LTS_LATEST_RELEASE]($LTS_RELEASE_URL) | $LTS_RELEASE_DATE | | ✅ | |"

          TABLE_START_LINE=$(echo "$README_CONTENT" | grep -n -E '^\|\s*Version\s*\|' | head -1 | cut -d':' -f1)
          if [ -z "$TABLE_START_LINE" ]; then
            echo "Version table header not found in README.md"
            exit 1
          fi

          echo "Found table at line: $TABLE_START_LINE"

          MAIN_ROW_LINE=$((TABLE_START_LINE + 2))
          V24_ROW_LINE=$((TABLE_START_LINE + 3))
          LTS_ROW_LINE=$((TABLE_START_LINE + 4))

          UPDATED_README=$(echo "$README_CONTENT" | awk -v row="$MAIN_NEW_ROW" -v line="$MAIN_ROW_LINE" 'NR == line {print row; next} 1')
          UPDATED_README=$(echo "$UPDATED_README" | awk -v row="$V24_NEW_ROW" -v line="$V24_ROW_LINE" 'NR == line {print row; next} 1')
          FINAL_README=$(echo "$UPDATED_README" | awk -v row="$LTS_NEW_ROW" -v line="$LTS_ROW_LINE" 'NR == line {print row; next} 1')

          echo "$FINAL_README" > profile/README.md
          echo "README.md updated successfully"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet profile/README.md; then
            echo "No changes detected in README.md"
          else
            echo "Changes detected, committing..."
            git add profile/README.md

            V24_VERSION="${{ env.V24_LATEST_RELEASE }}"
            V24_DATE="${{ env.V24_RELEASE_DATE }}"
            [ -z "$V24_VERSION" ] && V24_VERSION="None found" && V24_DATE="-"

            COMMIT_MSG="Update versions list in README
            - Latest: ${{ env.LATEST_RELEASE }} (${{ env.RELEASE_DATE }})
            - v2.4.*: $V24_VERSION ($V24_DATE)
            - LTS: ${{ env.LTS_LATEST_RELEASE }} (${{ env.LTS_RELEASE_DATE }})"

            git commit -m "$COMMIT_MSG"
            git push origin HEAD
            echo "Changes committed and pushed successfully"
          fi